#include <iostream>
using namespace std;

// Instructions:
// 1. Define a class named Car with the following members:
//    - A const integer member 'year' to store the car's manufacturing year.
//    - An integer member 'mileage' to store the car's mileage.
//    - A reference member 'ownerAge' to store a reference to an external integer.
// 2. In the class constructor, use an initializer list to initialize the 'year' and 'ownerAge' members.
// 3. The 'mileage' member should be initialized inside the constructor body. Generate error by assigning the value to const var.
// 4. Create a const member function 'showDetails' that prints the car's year, mileage, and owner's age, without modifying any members.
// 5. Create a non-const member function 'updateMileage' that updates the mileage of the car.
// 6. In the main function, declare an integer variable 'ownerAge' and assign it a value (e.g., 45).
// 7. Create an object of the Car class using the constructor, passing values for 'year', 'mileage', and 'ownerAge'.
// 8. Call the 'showDetails' function to display the car's information.
// 9. Call the 'updateMileage' function to update the car's mileage.
// 10. Call the 'showDetails' function again to show the updated mileage.
// 11. change the value of the owner age and then call the 'showDetails' function.

// Define a Car class to demonstrate const members, const functions, reference variables, and constructor initializer list
class Car {
public:
    const int year = 20;      // Const variable for the car year
    int mileage;         // Non-const member variable
    int &ownerAge = mileage;       // Reference variable, must be initialized in the initializer list

    // Constructor using initializer list to initialize const members and reference variables
    Car(int y, int mileage, int &age) 
        :  year(y), ownerAge(age) {
            // year = y; // Error generated by compiler
            this->mileage = mileage;
        }  
        // 'ownerAge' is initialized with reference to 'age'

    // Const function: guarantees it won't modify any member variables
    void showDetails() const {
        // mileage = 20;  This is not allowed because its const function
        cout << ", Year: " << year 
             << ", Mileage: " << mileage << ", Owner's Age: " << ownerAge << endl;
    }

    // Non-const function: Can modify member variables
    void updateMileage(int newMileage) {
        mileage = newMileage;  // This is allowed because it's a non-const function
    }
};

int main() {
    int ownerAge = 45;  // Define an integer variable for owner's age

    // Create a Car object with model "Toyota", year 2020, initial mileage 10000, and reference to owner's age
    Car myCar(2024, 10000, ownerAge);

    // Show car details using the const function
    myCar.showDetails();

    // Update mileage using the non-const function
    myCar.updateMileage(15000);

    // Show updated car details
    myCar.showDetails();


    return 0;
}
